/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Multisig, MultisigInterface } from "../Multisig";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_owners",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_confirmations",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "addTransaction",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
    ],
    name: "confirmTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
    ],
    name: "executeTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
    ],
    name: "getConfirmationsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_confirmation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_owners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_transaction_count",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
    ],
    name: "isConfirmed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "submitTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516117183803806117188339818101604052810190610032919061040c565b6000835111610076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161006d906104fe565b60405180910390fd5b600082116100b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100b090610590565b60405180910390fd5b82518211156100fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490610622565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260009080519060200190610154929190610164565b5081600281905550505050610642565b8280548282559060005260206000209081019282156101dd579160200282015b828111156101dc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610184565b5b5090506101ea91906101ee565b5090565b5b808211156102075760008160009055506001016101ef565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61026d82610224565b810181811067ffffffffffffffff8211171561028c5761028b610235565b5b80604052505050565b600061029f61020b565b90506102ab8282610264565b919050565b600067ffffffffffffffff8211156102cb576102ca610235565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061030c826102e1565b9050919050565b61031c81610301565b811461032757600080fd5b50565b60008151905061033981610313565b92915050565b600061035261034d846102b0565b610295565b90508083825260208201905060208402830185811115610375576103746102dc565b5b835b8181101561039e578061038a888261032a565b845260208401935050602081019050610377565b5050509392505050565b600082601f8301126103bd576103bc61021f565b5b81516103cd84826020860161033f565b91505092915050565b6000819050919050565b6103e9816103d6565b81146103f457600080fd5b50565b600081519050610406816103e0565b92915050565b60008060006060848603121561042557610424610215565b5b600084015167ffffffffffffffff8111156104435761044261021a565b5b61044f868287016103a8565b9350506020610460868287016103f7565b92505060406104718682870161032a565b9150509250925092565b600082825260208201905092915050565b7f4f776e657273206e6565647320746f2062652067726561746572207468616e2060008201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b60006104e860218361047b565b91506104f38261048c565b604082019050919050565b60006020820190508181036000830152610517816104db565b9050919050565b7f596f75206e65656420746865206e756d626572206f6620636f6e6669726d617460008201527f696f6e2073706563696669656400000000000000000000000000000000000000602082015250565b600061057a602d8361047b565b91506105858261051e565b604082019050919050565b600060208201905081810360008301526105a98161056d565b9050919050565b7f596f75207369676e6572732063616e2774206265206d6f7265207468616e206f60008201527f776e657273000000000000000000000000000000000000000000000000000000602082015250565b600061060c60258361047b565b9150610617826105b0565b604082019050919050565b6000602082019050818103600083015261063b816105ff565b9050919050565b6110c7806106516000396000f3fe60806040526004361061008a5760003560e01c8063a4298ab611610059578063a4298ab61461015b578063bce800e514610186578063c01a8c84146101c3578063d8772e79146101ec578063ee22610b146102175761008b565b80631d43b6531461008d578063784547a7146100b65780637a6550fc146100f357806384a372731461011e5761008b565b5b005b34801561009957600080fd5b506100b460048036038101906100af9190610af7565b610240565b005b3480156100c257600080fd5b506100dd60048036038101906100d89190610b37565b610332565b6040516100ea9190610b7f565b60405180910390f35b3480156100ff57600080fd5b506101086103ba565b6040516101159190610ba9565b60405180910390f35b34801561012a57600080fd5b5061014560048036038101906101409190610af7565b6103c4565b6040516101529190610ba9565b60405180910390f35b34801561016757600080fd5b506101706104ef565b60405161017d9190610c94565b60405180910390f35b34801561019257600080fd5b506101ad60048036038101906101a89190610b37565b61057d565b6040516101ba9190610ba9565b60405180910390f35b3480156101cf57600080fd5b506101ea60048036038101906101e59190610b37565b61065e565b005b3480156101f857600080fd5b50610201610881565b60405161020e9190610cd2565b60405180910390f35b34801561022357600080fd5b5061023e60048036038101906102399190610b37565b610898565b005b60003073ffffffffffffffffffffffffffffffffffffffff166384a3727384846040518363ffffffff1660e01b815260040161027d929190610cfc565b6020604051808303816000875af115801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c09190610d3a565b90503073ffffffffffffffffffffffffffffffffffffffff1663c01a8c84826040518263ffffffff1660e01b81526004016102fb9190610ba9565b600060405180830381600087803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b50505050505050565b60006002543073ffffffffffffffffffffffffffffffffffffffff1663bce800e5846040518263ffffffff1660e01b81526004016103709190610ba9565b602060405180830381865afa15801561038d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b19190610d3a565b10159050919050565b6000600254905090565b600060405180606001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020016000151581525060036000600160149054906101000a900460ff1660ff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555090505060018060148282829054906101000a900460ff166104b19190610d96565b92506101000a81548160ff021916908360ff16021790555060018060149054906101000a900460ff166104e49190610dcb565b60ff16905092915050565b6060600080548060200260200160405190810160405280929190818152602001828054801561057357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610529575b5050505050905090565b60008060005b600080549050811015610653576004600085815260200190815260200160002060008083815481106105b8576105b7610e00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561064657818061063b90610e2f565b925092505050610659565b8080600101915050610583565b50809150505b919050565b3360005b60008054905081101561087c578173ffffffffffffffffffffffffffffffffffffffff166000828154811061069a57610699610e00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071290610efa565b60405180910390fd5b60016004600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503073ffffffffffffffffffffffffffffffffffffffff1663784547a7846040518263ffffffff1660e01b81526004016107bd9190610ba9565b602060405180830381865afa1580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe9190610f46565b1561086f573073ffffffffffffffffffffffffffffffffffffffff1663ee22610b846040518263ffffffff1660e01b815260040161083c9190610ba9565b600060405180830381600087803b15801561085657600080fd5b505af115801561086a573d6000803e3d6000fd5b505050505b8080600101915050610662565b505050565b6000600160149054906101000a900460ff16905090565b3073ffffffffffffffffffffffffffffffffffffffff1663784547a7826040518263ffffffff1660e01b81526004016108d19190610ba9565b602060405180830381865afa1580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109129190610f46565b610951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094890610fbf565b60405180910390fd5b600060036000838152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682600101546040516109b690611010565b60006040518083038185875af1925050503d80600081146109f3576040519150601f19603f3d011682016040523d82523d6000602084013e6109f8565b606091505b5050905080610a3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3390611071565b60405180910390fd5b60018260020160006101000a81548160ff021916908315150217905550505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8e82610a63565b9050919050565b610a9e81610a83565b8114610aa957600080fd5b50565b600081359050610abb81610a95565b92915050565b6000819050919050565b610ad481610ac1565b8114610adf57600080fd5b50565b600081359050610af181610acb565b92915050565b60008060408385031215610b0e57610b0d610a5e565b5b6000610b1c85828601610aac565b9250506020610b2d85828601610ae2565b9150509250929050565b600060208284031215610b4d57610b4c610a5e565b5b6000610b5b84828501610ae2565b91505092915050565b60008115159050919050565b610b7981610b64565b82525050565b6000602082019050610b946000830184610b70565b92915050565b610ba381610ac1565b82525050565b6000602082019050610bbe6000830184610b9a565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610bfb82610a63565b9050919050565b610c0b81610bf0565b82525050565b6000610c1d8383610c02565b60208301905092915050565b6000602082019050919050565b6000610c4182610bc4565b610c4b8185610bcf565b9350610c5683610be0565b8060005b83811015610c87578151610c6e8882610c11565b9750610c7983610c29565b925050600181019050610c5a565b5085935050505092915050565b60006020820190508181036000830152610cae8184610c36565b905092915050565b600060ff82169050919050565b610ccc81610cb6565b82525050565b6000602082019050610ce76000830184610cc3565b92915050565b610cf681610a83565b82525050565b6000604082019050610d116000830185610ced565b610d1e6020830184610b9a565b9392505050565b600081519050610d3481610acb565b92915050565b600060208284031215610d5057610d4f610a5e565b5b6000610d5e84828501610d25565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610da182610cb6565b9150610dac83610cb6565b9250828201905060ff811115610dc557610dc4610d67565b5b92915050565b6000610dd682610cb6565b9150610de183610cb6565b9250828203905060ff811115610dfa57610df9610d67565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e3a82610ac1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e6c57610e6b610d67565b5b600182019050919050565b600082825260208201905092915050565b7f4f6e6c79204f776e65722063616e20636f6e6669726d2061207472616e73616360008201527f74696f6e00000000000000000000000000000000000000000000000000000000602082015250565b6000610ee4602483610e77565b9150610eef82610e88565b604082019050919050565b60006020820190508181036000830152610f1381610ed7565b9050919050565b610f2381610b64565b8114610f2e57600080fd5b50565b600081519050610f4081610f1a565b92915050565b600060208284031215610f5c57610f5b610a5e565b5b6000610f6a84828501610f31565b91505092915050565b7f596f75206e656564206d6f726520636f6e6669726d6174696f6e730000000000600082015250565b6000610fa9601b83610e77565b9150610fb482610f73565b602082019050919050565b60006020820190508181036000830152610fd881610f9c565b9050919050565b600081905092915050565b50565b6000610ffa600083610fdf565b915061100582610fea565b600082019050919050565b600061101b82610fed565b9150819050919050565b7f5472616e666572206661696c6564000000000000000000000000000000000000600082015250565b600061105b600e83610e77565b915061106682611025565b602082019050919050565b6000602082019050818103600083015261108a8161104e565b905091905056fea2646970667358221220180191c0a4f11201d3850c115101c16761671f0cbf58688711d46e9c985ad35164736f6c634300081c0033";

type MultisigConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultisigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multisig__factory extends ContractFactory {
  constructor(...args: MultisigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _owners: AddressLike[],
    _confirmations: BigNumberish,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _owners,
      _confirmations,
      _owner,
      overrides || {}
    );
  }
  override deploy(
    _owners: AddressLike[],
    _confirmations: BigNumberish,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _owners,
      _confirmations,
      _owner,
      overrides || {}
    ) as Promise<
      Multisig & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Multisig__factory {
    return super.connect(runner) as Multisig__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultisigInterface {
    return new Interface(_abi) as MultisigInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Multisig {
    return new Contract(address, _abi, runner) as unknown as Multisig;
  }
}
